kormap1=read.RDS("koemap1.RDS")
kormap1=readRDS("koemap1.RDS")
kormap1=readRDS("kormap1.RDS")
kormap1=readRDS("kormap1.RDS")
kormap2=readRDS("kormap2.RDS")
kormap3=readRDS("kormap3.RDS")
tbc=readRDS("tbc.RDS")
require(tmap)
qtm(tbc)
qtm(kormap1)
qtm(kormap1,"총인구_명")
devtools::use_data(kormap1)
devtools::use_data(kormap2)
devtools::use_data(kormap3)
areacode=read.csv("areacode.csv")
devtools::use_data(areacode)
devtools::use_data(tbc)
tools::checkRdaFiles()
tools::checkRdaFiles("data/*rda")
tools::checkRdaFiles("data/*.rda")
submap(kormap2,"부산")
source('~/ownCloud/Documents/Kormaps/R/Shape.R', echo=TRUE)
submap(kormap2,"부산")
qtm(submap(kormap2,"부산"))
class(kormap1)
str(areacode)
str(tbc)
colnames(tbc)[2:14]=paste0("0",colnames(tbc)[2:14])
str(tbc)
tbc=readRDS("tbc.RDS")
str(tbc)
colnames(tbc)[2:14]=paste0("Y",colnames(tbc)[2:14])
str(tbc)
devtools::use_data(tbc)
devtools::use_data(tbc,overwrite=TRUE)
class(kormap1)
str(kormap1@data)
korpopmap1=readRDS("kormap1.RDS")
korpopmap2=readRDS("kormap2.RDS")
korpopmap3=readRDS("kormap3.RDS")
kormap1=readRDS("level1.map")
kormap2=readRDS("level2.map")
kormap3=readRDS("level3.map")
class(kormap1)
str(kormap1@data)
korpopmap1=readRDS("kormap1.RDS")
korpopmap2=readRDS("kormap2.RDS")
korpopmap3=readRDS("kormap3.RDS")
kormap1=readRDS("level1.map")
kormap2=readRDS("level2.map")
kormap3=readRDS("level3.map")
devtools::use_data(kormap1)
devtools::use_data(kormap2)
devtools::use_data(kormap3)
devtools::use_data(korpopmap1)
devtools::use_data(korpopmap2)
devtools::use_data(korpopmap3)
qtm(korpopmap3,"총인구_명")
qtm(kormap3)
qtm(korpopmap3,"총인구_명")
length(korpopmap1)
length(korpopmap2)
length(korpopmap3)
library(Kormaps)
qtm(kormap1)
qtm(korpopmap1,"총인구_명")
devtools::use_testthat()
library(Kormaps)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
"korpopmap1"
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(Kormaps)
devtools::use_vignette("Introduction to Kormaps package")
devtools::install_github("cardiomoon/Kormaps")
str(kormap1@data)
require(Kormaps)
str(kormap1@data)
qtm(kormap1,"code")
require(tmap)
qtm(kormap1,"code")
qtm(kormap1,"code",text=NULL)
qtm(kormap1,"code",text=NULL)
qtm(kormap1,"code",text.col=NA)
qtm(korpopmap1,"총인구_명")
qtm(korpopmap2,"총인구_명")
qtm(submap(korpopmap2,"서울"),"총인구_명")
qtm(submap(korpopmap2,"서울"),"총인구_명")
Seoul2=submap(kormaps,"서울")
require(Kormaps)
Seoul2=submap(kormaps,"서울")
Seoul2=Kormaps::submap(kormaps,"서울")
require(Kormaps)
require(tmap)
qtm(korpopmap2,"총인구_명")
Seoul2=submap(kormaps,"서울")
qtm(submap(korpopmap2,"서울"),"총인구_명")
Seoul2=submap(korpopmaps,"서울")
Seoul2=submap(korpopmap2,"서울")
?submap
submap
submap
Kormaps::suubmap
Kormaps::submap
submap=function(map,area){
code=area2code(area)
if(is.na(code)) return(NULL)
else mydata=map[grep(paste0('^',code),map$code),]
}
Seoul2=submap(korpopmap2,"서울")
source('~/ownCloud/Documents/Kormaps/R/Shape.R', echo=TRUE)
Seoul2=submap(korpopmap2,"서울")
devtools::document()
library(Kormaps)
area2code
submap
library(Kormaps)
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"총인구_명")
qtm(Seoul2,"외국인_계_명")
colnames(korpopmap1@data)
qtm(submap(korpopmap3,"대구"),"아파트_호")
qtm(korpopmap1,"총인구_명")
qtm(korpopmap1,"총인구_명",text="행정구역별_읍면동")
qtm(korpopmap1,"총인구_명",text="name")
str(korpopmap1@data$name)
devtools::install_github("cardiomoon/Kormaps")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
require(leaflet)
myleaflet(korpopmap1,"총인구_명")
require(Kormaps)
myleaflet(korpopmap1,"총인구_명")
myleaflet(korpopmap1,"총인구_명")
library(Kormaps)
myleaflet(korpopmap1,"총인구_명")
myleaflet
kormap1
source('~/ownCloud/Documents/Kormaps/R/myleaflet.R', echo=TRUE)
source('~/ownCloud/Documents/Kormaps/R/Shape.R', echo=TRUE)
myleaflet(korpopmap1,"총인구_명")
myleaflet(korpopmap1,"총인구_명")
source('~/ownCloud/Documents/Kormaps/R/myleaflet.R', echo=TRUE)
myleaflet(korpopmap1,"총인구_명")
korpopmap3@data$name
library(Kormaps)
myleaflet(korpopmap1,"총인구_명")
colnames(korpopmap1@data)
myleaflet(submap(korpopmap3,"제주"),choices=c("남자_명","여자_명","주택_계_호"))
myleaflet(submap(korpopmap3,"광주"),choices=c("남자_명","여자_명","주택_계_호"))
devtools::document()
devtools::document()
library(Kormaps)
myleaflet(korpopmap1,"총인구_명")
require(Kormaps)
require(Kormapsdata)
require(tmap)
qtm(kormap1)
qtm(korpopmap1,"총인구_명",text="name")
colnames(korpopmap1@data)
qtm(korpopmap2,"총인구_명")
Seoul2=submap(korpopmap2,"서울")
require(Kormaps)
Seoul2=submap(korpopmap2,"서울")
?submap
Kormaps:submap
Kormaps:submap
devtools::document()
devtools::document()
library(Kormaps)
devtools::document()
library(Kormaps)
library(Kormaps)
require(Kormaps)
require(Kormapsdata)
require(tmap)
qtm(kormap1)
qtm(korpopmap1,"총인구_명",text="name")
colnames(korpopmap1@data)
Seoul2=submap(korpopmap2,"서울")
Seoul2=submap(korpopmap2,"서울")
submap
devtools::document()
devtools::load_all(".")
Seoul2=submap(korpopmap2,"서울")
install.packages(c("ade4", "assertive.properties", "assertive.reflection", "assertive.sets", "assertive.strings", "deldir", "evaluate", "formatR", "ggplot2", "Matrix", "mgcv", "OpenMx", "RcppEigen", "RCurl", "rgdal", "rgeos", "rvg", "semTools", "V8", "viridis", "XML"))
install.packages(c("deldir", "mgcv", "rgdal", "rgeos", "rvg", "V8"))
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
require(Kormaps)
require(tmap)
qtm(kormap1)
qtm(korpopmap2,"총인구_명")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
qtm(submap(korpopmap3,"대구"),"아파트_호")
devtols::document()
devtools::document()
devtools::load_all(".")
qtm(korpopmap1,"총인구_명",text="name")
colnames(korpopmap1@data)
qtm(korpopmap2,"총인구_명")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
qtm(submap(korpopmap3,"대구"),"아파트_호")
install.packages("knitr")
devtools::install_github("cardiomoon/Kormaps")
require(Kormaps)
require(tmap)
qtm(kormap1)
qtm(korpopmap1,"총인구_명",text="name")
colnames(korpopmap1@data)
qtm(korpopmap2,"총인구_명")
Seoul2=submap(korpopmap2,"서울")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
qtm(korpopmap2,"총인구_명")
colnames(korpopmap1@data)
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
qtm(submap(korpopmap3,"대구"),"아파트_호")
qtm(submap(korpopmap3,"대구"),"아파트_호")
qtm(submap(korpopmap3,"대구"),"아파트_호")
qtm(submap(korpopmap3,"대구"),"아파트_호")
qtm(submap(korpopmap3,"대구"),"아파트_호")
require(Kormaps)
require(tmap)
qtm(kormap1)
require(leaflet)
myleaflet(korpopmap1,"총인구_명")
qtm(submap(korpopmap3,"대구"),"아파트_호")
devtools::document()
require(Kormapsdata)
devtools::load_all(".")
require(leaflet)
myleaflet(submap(korpopmap3,"광주"),choices=c("남자_명","여자_명","주택_계_호"))
require(leaflet)
myleaflet(korpopmap1,"총인구_명")
qtm(submap(korpopmap3,"대구"),"아파트_호")
qtm(korpopmap2,"총인구_명")
colnames(korpopmap1@data)
qtm(korpopmap1,"총인구_명",text="name")
require(leaflet)
myleaflet(submap(korpopmap3,"광주"),choices=c("남자_명","여자_명","주택_계_호"))
devtools::document()
devtools::load_all(".")
library(Kormaps)
require(Kormaps)
require(leaflet)
myleaflet(korpopmap1,"총인구_명")
devtools::install_github("cardiomoon/Kormaps")
require(Kormaps)
qtm(kormap1)
qtm(korpopmap1,"총인구_명",text="name")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
qtm(submap(korpopmap3,"대구"),"아파트_호")
require(Kormaps)
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
library(Kormaps)
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
library(Kormaps)
require(Kormaps)
require(tmap)
qtm(kormap1)
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
library(Kormaps)
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
Seoul2=submap(korpopmap2,"서울")
qtm(Seoul2,"외국인_계_명")
devtools::install_github("cardiomoon/Kormapsdata")
areacode
require(Kormapsdata)
areacode
areacode[areacode$name=="부산",code]
areacode[areacode$name=="부산",1]
areacode[areacode$name2=="부산",1]
area2code<-function(area){
result<-NA
pos<-grep(area,areacode[[2]])
if(!is.integer0(pos)) result<-areacode[pos,1]
else {
pos<-grep(areacode[[3]],area)
if(!is.integer0(pos)) result<-areacode[pos,1]
}
result
}
area2code("서울")
#' Select a subdata of map
#'
#' @param map an object of class Shape(SpatialPolygonsDataFrame)
#' @param area a string of area looking for
#'
#' @return Subdata of class Shape of which code matched with area
submap <-function(map,area){
code<-area2code(area)
if(is.na(code)) return(NULL)
else mydata<-map[grep(paste0('^',code),map$code),]
}
#' Returns if x is integer(0)
#' @param x a vector
#'
#' @return a logical value: TRUE for integer(0) otherwise FALSE
is.integer0 <- function(x) {is.integer(x) && length(x) == 0L}
#' Seek area from data areacode and returns the code
#'
#' @param area a string looking for
#'
#' @return a code if the area is found, else returns NA
area2code<-function(area){
result<-NA
pos<-grep(area,areacode[[2]])
if(!is.integer0(pos)) result<-areacode[pos,1]
else {
pos<-grep(areacode[[3]],area)
if(!is.integer0(pos)) result<-areacode[pos,1]
}
result
}
area2code("서울")
area2code("경상")
area2code(c("서울","경기"))
library(Kormaps)
area2code("경상")
library(Kormaps)
area2code("경상")
submap
devtools::document()
?submap
submap
library(Kormaps)
submap
?submap
?submap
submap
devtools::document()
submap
library(Kormaps)
submap
library(Kormaps)
submap
submap
library(Kormaps)
?submap
submap
submap
library(Kormaps)
submap
library(Kormaps)
?submap
submap
library(Kormaps)
submap
?submap
submap
library(Kormaps)
submap
laodNamespace("Kormap")
loadNamespace("Kormap")
loadNamespace("Kormaps")
submap
install.packages("Rd2roxygen")
library(Rd2roxygen)
formatR::usage(Rd2roxygen)
rab("Kormaps")
library(Kormaps)
submap
?submap
submap
library(Kormaps)
submap
area2code
library(Kormaps)
library(Kormaps)
submap
area2code
roxygen2::roxygenize("Kormaps")
roxygen2::roxygenize("Kormaps")
library(Kormaps)
library(Kormaps)
roxygen2::roxygenize("Kormaps")
roxygen2::roxygenize()
roxygen2::roxygenize()
submap
library(Kormaps)
submap
devtools::install_deps(dependencies = TRUE)
submap
library(Kormaps)
devtools::create()
devtools::document()
devtools::document()
library(Kormaps)
submap
myleaflet
devtools::document()
knitr::knit("vignettes/introduction.Rmd")
library(Kormaps)
library(tmap)
library(magrittr)
library(leaflet)
library(extrafont)
library(dplyr)
### [X] Override locale -> change col and change col name : Colnames are not changed
### [ ] Override locale -> change col name and change col : Colnames are not changed
### Locale adjustment
### [ ] Is this necessary?
Sys.setlocale("LC_ALL") # See what locale used in your OS and system
Sys.setlocale("LC_ALL", "C") # Override locale
fuckwindows <- function(df, colnum)
{
fres <- sapply(df[colnum], function(x){iconv(x, "UTF-8", "CP949")})
df[colnum] <- fres
return(df)
}
test <- korpopmap1@data
# For Windows change character encoding from UTF-8 to CP949
colnames(test) <- iconv(colnames(test), "UTF-8", "CP949")
kornames <- colnames(test)
fuckset <- which(sapply(test, is.character))
for(ii in fuckset)
{
test <- fuckwindows(test, ii)
}
test
colnames(test) <- kornames
test
kornames
colnames(test) <- kornames
test
colnames(test)
View(test)
qtm(test)
testmap <- korpopmap1
testmap@data <- test
qtm(testmap)
qtm(testmap,"총인구_명") + tm_layout(fontfamily="NanumBarunGothic")
testmap@data
colnames(testmap@data)
qtm(testmap,"총인구_명")
qtm(testmap, "name_eng")
qtm(korpopmap2, "name_eng")
korpopmap2@data$name_eng
